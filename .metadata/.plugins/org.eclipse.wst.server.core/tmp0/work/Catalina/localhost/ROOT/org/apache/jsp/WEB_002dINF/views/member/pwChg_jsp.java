/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-05-07 05:13:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class pwChg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/default.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<script src=\"/resources/js/sweetalert.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	.wrap {\r\n");
      out.write("		min-width: 400px;\r\n");
      out.write("		min-height: 400px;\r\n");
      out.write("	}\r\n");
      out.write("	.pw-container {\r\n");
      out.write("		display: flex;\r\n");
      out.write("		align-items: center;\r\n");
      out.write("	}\r\n");
      out.write("	.section { \r\n");
      out.write("		width: 400px;\r\n");
      out.write("		margin : 0 auto;\r\n");
      out.write("		display : flex;\r\n");
      out.write("		justifry-content : center;\r\n");
      out.write("	}\r\n");
      out.write("	.pw-info-wrap {\r\n");
      out.write("		width : 90%;\r\n");
      out.write("	}\r\n");
      out.write("	.input-wrap {\r\n");
      out.write("		margin-bottom : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	.pw-btn {\r\n");
      out.write("		margin : 20px 0px;\r\n");
      out.write("		text-align : center;\r\n");
      out.write("		display : flex;\r\n");
      out.write("		justify-content : center;\r\n");
      out.write("		gap : 10px;\r\n");
      out.write("	}\r\n");
      out.write("	pw-btn>button {\r\n");
      out.write("		width : 40%;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>	\r\n");
      out.write("\r\n");
      out.write("	<div class=\"wrap\">\r\n");
      out.write("		<main class=\"content pw=container\">\r\n");
      out.write("			<section class=\"section\">\r\n");
      out.write("				<div class=\"pw-info-wrap\">\r\n");
      out.write("					<form id=\"pwChgForm\" action=\"/member/pwChg\" method=\"post\" onsubmit=\"return validateForm()\">\r\n");
      out.write("						\r\n");
      out.write("						<div class=\"input-wrap\">\r\n");
      out.write("							<div class=\"input-title\">\r\n");
      out.write("								<label for=\"memberPw\">현재 비밀번호</label>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"input-item\">\r\n");
      out.write("								");
      out.write("\r\n");
      out.write("								<input type=\"password\" id=\"memberPw\" name=\"memberPw\">\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("						\r\n");
      out.write("						<div class=\"input-wrap\">\r\n");
      out.write("							<div class=\"input-title\">\r\n");
      out.write("								<label for=\"newMemberPw\">새 비밀번호</label>								\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"input-item\">\r\n");
      out.write("								<input type=\"password\" id=\"newMemberPw\" name=\"newMemberPw\" placeholder=\"영어, 숫자, 특수문자(!,@,#,$) 6~30글자\">\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("						\r\n");
      out.write("						<div class=\"input-wrap\">\r\n");
      out.write("							<div class=\"input-title\">\r\n");
      out.write("								<label for=\"newMemberPwRe\">새 비밀번호 확인</label>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"input-item\">\r\n");
      out.write("								<input type=\"password\" id=\"newMemberPwRe\" name=\"newMemberPwRe\" placeholder=\"새 비밀번호 확인\">\r\n");
      out.write("							</div>\r\n");
      out.write("							<p id=\"pwMessage\" class=\"input-msg\"></p>\r\n");
      out.write("						</div>	\r\n");
      out.write("						\r\n");
      out.write("						<div class=\"pw-btn\">\r\n");
      out.write("							<button type=\"submit\" class=\"btn-primary lg\">변경하기</button>\r\n");
      out.write("							<button type=\"button\" onclick=\"closeFn()\" class=\"btn-secondary lg\">닫기</button>\r\n");
      out.write("						</div>\r\n");
      out.write("											\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("			</section>\r\n");
      out.write("		</main>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("	//닫기 버튼 클릭 시\r\n");
      out.write("	function closeFn(){\r\n");
      out.write("		self.close();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function validateForm(){\r\n");
      out.write("		//현재 비밀번호 검증(사용자가 입력한 기존 비밀번호와 세션에 저장된 회원의 비밀번호 비교)\r\n");
      out.write("		console.log('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberPw}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("		\r\n");
      out.write("		if($('#memberPw').val() != '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberPw}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'){\r\n");
      out.write("			swal({\r\n");
      out.write("				title : \"알림\",\r\n");
      out.write("				text : \"현재 비밀번호가 일치하지 않습니다.\",\r\n");
      out.write("				icon : \"warning\"\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//새 비밀번호가 정규표현식 패턴에 만족하는지?\r\n");
      out.write("		const regExp = /^[a-zA-Z0-9!@#$]{6,30}$/; //영어, 숫자, 특수문자 (!@#$) 6~30글자\r\n");
      out.write("		\r\n");
      out.write("		if(!regExp.test($('#newMemberPw').val())){\r\n");
      out.write("			swal({\r\n");
      out.write("				title : \"알림\",\r\n");
      out.write("				text : \"새 비밀번호가 유효하지 않습니다.\",\r\n");
      out.write("				icon : \"warning\"\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			return false;\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("				\r\n");
      out.write("		//새 비밀번호와 새 비밀번호 확인값이 같은지?\r\n");
      out.write("				\r\n");
      out.write("		if($('#newMemberPw').val() != $('#newMemberPwRe').val()){\r\n");
      out.write("			swal({\r\n");
      out.write("				title : \"알림\",\r\n");
      out.write("				text : \"새 비밀번호와 새 비밀번호 확인 값이 일치하지 않습니다.\",\r\n");
      out.write("				icon : \"warning\"\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			return false;\r\n");
      out.write("		}		\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
