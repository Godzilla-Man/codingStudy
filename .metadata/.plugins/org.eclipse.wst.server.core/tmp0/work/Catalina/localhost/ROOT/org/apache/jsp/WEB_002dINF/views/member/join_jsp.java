/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-05-01 02:00:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	.join-wrap {\r\n");
      out.write("		width : 500px;\r\n");
      out.write("		margin : 0 auto;\r\n");
      out.write("	}\r\n");
      out.write("	.join-wrap .input-wrap {\r\n");
      out.write("		padding : 15px 30px;\r\n");
      out.write("	}\r\n");
      out.write("	.join-wrap .join-button-box {\r\n");
      out.write("		padding : 20px 30px;\r\n");
      out.write("		display : flex;\r\n");
      out.write("		justify-content: center;\r\n");
      out.write("	}\r\n");
      out.write("	.join-wrap .join-button-box>button {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"wrap\">\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/header.jsp", out, false);
      out.write("\r\n");
      out.write("		<main class=\"content\">\r\n");
      out.write("			<section class=\"section join-wrap\">\r\n");
      out.write("				<div class=\"page-title\">회원가입</div>\r\n");
      out.write("				<form action='/member/join' method='post' autocomplete=\"off\" onsubmit=\"return validateForm()\"> ");
      out.write("\r\n");
      out.write("				\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberId\">아이디</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"text\" id=\"memberId\" name=\"memberId\" placeholder=\"영어, 숫자 8~20글자\" maxlength=\"20\">\r\n");
      out.write("							");
      out.write("\r\n");
      out.write("							<button type=\"button\" class=\"btn-primary\" id=\"idDuplChkBtn\">중복체크</button>\r\n");
      out.write("						</div>\r\n");
      out.write("						<p id=\"idMessage\" class=\"input-msg\"></p>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberPw\">비밀번호</label>							\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"password\" id=\"memberPw\" name=\"memberPw\" placeholder=\"영어, 숫자, 특수문자(!,@,#,$) 6~30글자\" maxlength=\"30\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberPwRe\">비밀번호 확인</label>							\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"password\" id=\"memberPwRe\" maxlength=\"30\">\r\n");
      out.write("						</div>\r\n");
      out.write("						<p id=\"pwMessage\" class=\"input-msg\"></p>\r\n");
      out.write("					</div>														\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberEmail\">이메일</label>							\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"email\" id=\"memberEmail\" name=\"memberEmail\">\r\n");
      out.write("						</div>\r\n");
      out.write("						<p id=\"emailMessage\" class=\"input-msg\"></p>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberName\">이름</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"text\" id=\"memberName\" name=\"memberName\" placeholder=\"한글 2~10글자\" maxlength=\"10\">\r\n");
      out.write("						</div>\r\n");
      out.write("						<p id=\"nameMessage\" class=\"input-msg\"></p>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberPhone\">전화번호</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"text\" id=\"memberPhone\" name=\"memberPhone\" placeholder=\"전화번호(010-0000-0000)\" maxlength=\"13\">\r\n");
      out.write("						</div>\r\n");
      out.write("						<p id=\"phoneMessage\" class=\"input-msg\"></p>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-wrap\">\r\n");
      out.write("						<div class=\"input-title\">\r\n");
      out.write("							<label for=\"memberAddr\">주소</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"input-item\">\r\n");
      out.write("							<input type=\"text\" id=\"memberAddr\" name=\"memberAddr\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"join-button-box\">\r\n");
      out.write("						<button type=\"submit\" class=\"btn-primary lg\">회원가입</button>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("				</form>\r\n");
      out.write("			</section>\r\n");
      out.write("		</main>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("		//브라우저에 html, css가 모두 로드되고 난 이후에 자동으로 실행되는 함수\r\n");
      out.write("	\r\n");
      out.write("			\r\n");
      out.write("			//사용자 입력값 유효성 검증 결과를 저장할 객체\r\n");
      out.write("			//사용자가 값을 입력할때마다 검증하여, 만족할 경우 true로 만족하지 못할 경우 false로 변경\r\n");
      out.write("			//최종적으로 회원가입 버튼 클릭 시, 아래 객체의 모든 속성이 true인지 검사할 것임.\r\n");
      out.write("			const checkObj = {\r\n");
      out.write("				\"memberId\" : false,\r\n");
      out.write("				\"memberPw\" : false,\r\n");
      out.write("				\"memberPwRe\" : false,\r\n");
      out.write("				\"memberName\" : false,\r\n");
      out.write("				\"memberPhone\" : false,\r\n");
      out.write("				\"memberEmail\" : false,\r\n");
      out.write("				\"idDuplChk\" : false // 아이디 중복체크 여부(true면 중복X, false면 중복O 또는 중복체크 진행하지 않음.)\r\n");
      out.write("			};\r\n");
      out.write("			\r\n");
      out.write("			const memberId = $('#memberId'); //jQuery 방식으로 HTML 요소 선택(id 속성 값이 'memberId'인 요소)\r\n");
      out.write("			const idMessage = $('#idMessage'); //입력 ID 유효성 검증 결과 메세지를 보여줄 요소\r\n");
      out.write("			\r\n");
      out.write("			//id를 입력할 수 있는 요소에, input (key 관련, mouse 관련, 붙여넣기) 이벤트 발생 시 동작할 핸들러 함수 작성\r\n");
      out.write("			$(memberId).on('input', function(){\r\n");
      out.write("				checkObj.idDuplChk = false; //아이디 입력시마다, 중복체크 값 false로 변경하여 다시 중복체크 할 수 있도록\r\n");
      out.write("				\r\n");
      out.write("				//아래 코드 작성하지 않으면, 클래스를 추가해주기만 하기 때문에 두 클래스가 공존할 수 있음.\r\n");
      out.write("				$(idMessage).removeClass('valid');\r\n");
      out.write("				$(idMessage).removeClass('invalid');\r\n");
      out.write("				\r\n");
      out.write("				//아이디 정규 표현식 = 영어, 숫자 8~20글자\r\n");
      out.write("				const regExp = /^[a-zA-Z0-9]{8,20}$/;\r\n");
      out.write("				\r\n");
      out.write("				//정규표현식.test(검사할 문자열) => 만족하면 true, 만족하지 않으면 false 반환\r\n");
      out.write("				/* 이벤트 핸들러 함수 내부에서, 이벤트가 발생한 요소 객체 == this == 이 this는 자바스크립트 객체!!\r\n");
      out.write("				   val()은 jQuery 메소드!\r\n");
      out.write("				   자바스크립트 객체를 jQuery화 하는 방법 ==> $(자바스크립트객체)\r\n");
      out.write("				   \r\n");
      out.write("				   val() ==> value 속성값 가져오기\r\n");
      out.write("				   val('값') ==> value 속성값 변경하기\r\n");
      out.write("				*/\r\n");
      out.write("				if(regExp.test($(this).val())){\r\n");
      out.write("					//사용자가 입력한 ID가 정규표현식에 만족하는 경우\r\n");
      out.write("					$(idMessage).text('good!');\r\n");
      out.write("					checkObj.memberId = true;\r\n");
      out.write("					$(idMessage).addClass('valid');\r\n");
      out.write("				}else{\r\n");
      out.write("					//사용자가 입력한 ID가 정규표현식에 만족하지 않는 경우\r\n");
      out.write("					$(idMessage).text(\"영어, 숫자 8~20글자 사이로 입력하세요.\");\r\n");
      out.write("					\r\n");
      out.write("					/* 객체의 속성에 접근하는 방법\r\n");
      out.write("					1) 객체명.속성명		  ==> 속성의 값을 get!! 가져옴\r\n");
      out.write("					   객체명.속성명 = 값;    ==> 속성의 값을 set!! 변경함\r\n");
      out.write("					   \r\n");
      out.write("					2) 객체명['속성명']       ==> 속성의 값을 get!! 가져옴\r\n");
      out.write("					   객체명['속성명'] = 값;  ==> 속성의 값을 set!! 변경함\r\n");
      out.write("					*/\r\n");
      out.write("					checkObj.memberId = false;\r\n");
      out.write("					$(idMessage).addClass('invalid');\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//아이디 중복체크\r\n");
      out.write("			const idDuplChkBtn = $('#idDuplChkBtn'); //중복체크 버튼 요소\r\n");
      out.write("			$(idDuplChkBtn).on('click', function(){\r\n");
      out.write("				$(idMessage).removeClass('valid');\r\n");
      out.write("				$(idMessage).removeClass('invalid');\r\n");
      out.write("				\r\n");
      out.write("				if(!checkObj.memberId){ //아이디 유효성 검증 결과가 false일 때\r\n");
      out.write("					swal({\r\n");
      out.write("						title : \"알림\",\r\n");
      out.write("						text : \"유효한 ID를 입력하고, 중복체크를 진행하세요.\",\r\n");
      out.write("						icon : \"warning\"\r\n");
      out.write("					});\r\n");
      out.write("				\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//중복체크 코드\r\n");
      out.write("				\r\n");
      out.write("				/* (1) 스크립트 태그 내부에서, 서버에 요청 보내기 => location.href 사용				\r\n");
      out.write("				*/\r\n");
      out.write("				//location.href = '/idDuplChk?memberId=' + $(memberId).val();\r\n");
      out.write("				\r\n");
      out.write("				/* 위 방식대로 요청 및 서블릿에서 기존 서블릿과 동일하게 4. 결과 처리 진행화면\r\n");
      out.write("				   join.jsp를 브라우저에 다시 그림. 즉, 입력값들이 초기화 되어진다.\r\n");
      out.write("				   \r\n");
      out.write("				   - 비동기 통신 기술 중, ajax라는 기술을 이용하면 페이지 전환 없이 데이터만\r\n");
      out.write("				     서버로부터 응답받아, 동적으로 페이지의 일부분을 업데이트 해줄 수 있음.\r\n");
      out.write("				     \r\n");
      out.write("				     아래는 jQuery로 작성한 ajax\r\n");
      out.write("				*/\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : \"/idDuplChk\",		 					// 요청 URL\r\n");
      out.write("					data : { 'memberId' : $(memberId).val() },	// 서버로 전송할 데이터\r\n");
      out.write("					type : \"get\",								// 데이터 전송 방식\r\n");
      out.write("					success : function(res){					// 비동기 통신 성공 시, 호출 함수\r\n");
      out.write("						if(res == 0){ //중복 X == 회원가입 가능\r\n");
      out.write("							swal({\r\n");
      out.write("								title : \"알림\",\r\n");
      out.write("								text : \"사용 가능한 ID 입니다.\",\r\n");
      out.write("								icon : \"success\"								\r\n");
      out.write("							});\r\n");
      out.write("							\r\n");
      out.write("							checkObj.idDuplChk = true;\r\n");
      out.write("						}else {\r\n");
      out.write("							swal({\r\n");
      out.write("								title : \"알림\",\r\n");
      out.write("								text : \"이미 사용중인 ID 입니다.\",\r\n");
      out.write("								icon : \"warning\"\r\n");
      out.write("							});\r\n");
      out.write("							\r\n");
      out.write("							checkObj.idDuplChk = false;\r\n");
      out.write("						}\r\n");
      out.write("					},\r\n");
      out.write("					error : function(){							// 비동기 통신 에러 시, 호출 함수\r\n");
      out.write("						\r\n");
      out.write("					}\r\n");
      out.write("				});				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//비밀번호 유효성 검사\r\n");
      out.write("			const memberPw = $('#memberPw');\r\n");
      out.write("			const pwMessage = $('#pwMessage');\r\n");
      out.write("			const memberPwRe = $('#memberPwRe');\r\n");
      out.write("			\r\n");
      out.write("			$(memberPw).on('input', function(){\r\n");
      out.write("				$(pwMessage).removeClass('invalid');\r\n");
      out.write("				$(pwMessage).removeClass('valid');\r\n");
      out.write("				\r\n");
      out.write("				const regExp = /^[a-zA-Z0-9!@#$]{6,30}$/; //영어, 숫자, 특수문자 (!@#$) 6~30글자\r\n");
      out.write("				\r\n");
      out.write("				if(regExp.test($(memberPw).val())){\r\n");
      out.write("					checkObj.memberPw = true;\r\n");
      out.write("					\r\n");
      out.write("					//비밀번호 확인값이 입력이 되었을 때\r\n");
      out.write("					if($(memberPwRe).val().length > 0) {\r\n");
      out.write("						checkPw(); //비밀번호와 확인값 일치하는지 체크\r\n");
      out.write("					}else{\r\n");
      out.write("						$(pwMessage).text('good!');\r\n");
      out.write("						$(pwMessage).addClass('valid');\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("				}else{\r\n");
      out.write("					checkObj.memberPw = false;\r\n");
      out.write("					$(pwMessage).text('비밀번호 형식이 유효하지 않습니다.');\r\n");
      out.write("					$(pwMessage).addClass('invalid');					\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			//비밀번호 확인 유효성 검사\r\n");
      out.write("			$(memberPwRe).on('input', checkPw);\r\n");
      out.write("			\r\n");
      out.write("			function checkPw(){\r\n");
      out.write("				$(pwMessage).removeClass('invalid');\r\n");
      out.write("				$(pwMessage).removeClass('valid');\r\n");
      out.write("				\r\n");
      out.write("				//입력한 비밀번호와 값이 같은지만 검증\r\n");
      out.write("				if($(memberPw).val() == $(memberPwRe).val()){\r\n");
      out.write("					$(pwMessage).text('good!');\r\n");
      out.write("					$(pwMessage).addClass('valid');\r\n");
      out.write("					checkObj.memberPwRe = true;\r\n");
      out.write("				}else{\r\n");
      out.write("					$(pwMessage).text('비밀번호가 일치하지 않습니다.');\r\n");
      out.write("					$(pwMessage).addClass('invalid');\r\n");
      out.write("					checkObj.memberPwRe = false;					\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//이메일 유효성 검사\r\n");
      out.write("			const memberEmail = $('#memberEmail');\r\n");
      out.write("			const emailMessage = $('#emailMessage');\r\n");
      out.write("			\r\n");
      out.write("			$(memberEmail).on('input', function(){\r\n");
      out.write("				$(emailMessage).removeClass('invalid');\r\n");
      out.write("				$(emailMessage).removeClass('valid');\r\n");
      out.write("				\r\n");
      out.write("				const regExp = /^[0-9a-zA-Z]([-_]?[0-9a-zA-Z])*@[a-zA-Z]([-_.]?[0-9a-zA-Z])+(\\.[a-z]{2,3})$/;\r\n");
      out.write("				\r\n");
      out.write("				if(regExp.test($(this).val())){\r\n");
      out.write("					$(emailMessage).text('good!');\r\n");
      out.write("					$(emailMessage).addClass('valid');\r\n");
      out.write("					checkObj.memberEmail = true;\r\n");
      out.write("				}else{\r\n");
      out.write("					$(emailMessage).text('이메일 형식이 올바르지 않습니다.');\r\n");
      out.write("					$(emailMessage).addClass('invalid');\r\n");
      out.write("					checkObj.memberEmail = false;					\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//전화번호 유효성 검사\r\n");
      out.write("			const memberPhone = $('#memberPhone');\r\n");
      out.write("			const phoneMessage = $('#phoneMessage');\r\n");
      out.write("			\r\n");
      out.write("			$(memberPhone).on('input', function(){\r\n");
      out.write("				$(phoneMessage).removeClass('invalid');\r\n");
      out.write("				$(phoneMessage).removeClass('valid');\r\n");
      out.write("				\r\n");
      out.write("				const regExp = /^010-\\d{3,4}-\\d{4}/;\r\n");
      out.write("				\r\n");
      out.write("				if(regExp.test($(this).val())){\r\n");
      out.write("					$(phoneMessage).text('good!');\r\n");
      out.write("					$(phoneMessage).addClass('valid');\r\n");
      out.write("					checkObj.memberPhone = true;\r\n");
      out.write("				}else{\r\n");
      out.write("					$(phoneMessage).text('전화번호 형식이 올바르지 않습니다.');\r\n");
      out.write("					$(phoneMessgae).addClass('invalid');\r\n");
      out.write("					checkObj.memberPhone = false;\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//이름 유효성 검사\r\n");
      out.write("			const memberName = $('#memberName');\r\n");
      out.write("			const nameMessage = $('#nameMessage');\r\n");
      out.write("			\r\n");
      out.write("			$(memberName).on('input', function(){\r\n");
      out.write("				$(nameMessage).removeClass('invalid');\r\n");
      out.write("				$(nameMessage).removeClass('valid');\r\n");
      out.write("				\r\n");
      out.write("				const regExp = /^[가-힣]{2,10}$/;\r\n");
      out.write("				\r\n");
      out.write("				if(regExp.test($(this).val())){\r\n");
      out.write("					$(nameMessage).text('good!');\r\n");
      out.write("					$(nameMessage).addClass('valid');\r\n");
      out.write("					checkObj.memberName = true;\r\n");
      out.write("				}else{\r\n");
      out.write("					$(nameMessage).text('이름 형식이 유효하지 않습니다.');\r\n");
      out.write("					$(nameMessage).addClass('invalid');\r\n");
      out.write("					checkObj.memberName = false;\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			function validateForm(){\r\n");
      out.write("				/*\r\n");
      out.write("				회원 가입 버튼 클릭 시, checkObj의 모든 속성에 접근하여\r\n");
      out.write("				true인지 검증\r\n");
      out.write("				*/			\r\n");
      out.write("				\r\n");
      out.write("				let str = \"\";\r\n");
      out.write("				\r\n");
      out.write("				for(let key in checkObj){ //key 변수에 객체의 각 속성명이 순차적으로 할당됨.\r\n");
      out.write("					//checkObj.key //checkObj에서 key라는 속성을 찾으려고 함.\r\n");
      out.write("					\r\n");
      out.write("					if(!checkObj[key]){ //반복 접근중인 속성의 값이 하나라도 false이면, submit 제어 \r\n");
      out.write("						switch(key){\r\n");
      out.write("							case \"memberId\" : str = \"아이디 형식\"; break;\r\n");
      out.write("							case \"memberPw\" : str = \"비밀번호 형식\"; break;\r\n");
      out.write("							case \"memberPwRe\" : str = \"비밀번호 확인 형식\"; break;\r\n");
      out.write("							case \"memberName\" : str = \"이름 형식\"; break;\r\n");
      out.write("							case \"memberEmail\" : str = \"이메일 형식\"; break;\r\n");
      out.write("							case \"memberPhone\" : str = \"전화번호 형식\"; break;\r\n");
      out.write("						}\r\n");
      out.write("					\r\n");
      out.write("						if(key != 'idDupleChk'){\r\n");
      out.write("							str += \"이 유효하지 않습니다.\";							\r\n");
      out.write("						}else{\r\n");
      out.write("							str = \"아이디 중복체크를 진행하세요.\";\r\n");
      out.write("						}	\r\n");
      out.write("						\r\n");
      out.write("						swal({\r\n");
      out.write("							title : '회원가입 실패',\r\n");
      out.write("							text : str,\r\n");
      out.write("							icon : 'warning'							\r\n");
      out.write("						});\r\n");
      out.write("						\r\n");
      out.write("						return false; //submit 동작 제어						\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
