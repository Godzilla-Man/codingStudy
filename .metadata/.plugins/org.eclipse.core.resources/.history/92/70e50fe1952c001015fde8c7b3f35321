package kr.or.iei.notice.model.service;

import java.sql.Connection;
import java.util.ArrayList;

import kr.or.iei.common.JDBCTemplate;
import kr.or.iei.common.ListData;
import kr.or.iei.notice.model.dao.NoticeDao;
import kr.or.iei.notice.model.vo.Notice;
import kr.or.iei.notice.model.vo.NoticeFile;

public class NoticeService {
	
	private NoticeDao dao;
	
	public NoticeService() {
		dao = new NoticeDao();
	}

	public ListData<Notice> selectNoticeList(int reqPage) {
		Connection conn = JDBCTemplate.getConnection();
		
		//한 페이지에 보여줄 게시글의 갯수
		int viewNoticeCnt = 10;
		
		//시작 행번호(start)와 끝 행번호(end)를  요청 페이지 번호(reqPage)에 따라 연산
		
		/*
		 *  reqPage == 1, start ==1, end == 10
		 *  reqPage == 2, start ==11, end == 20
		 *  reqPage == 3, start ==21, end == 30
		 *  reqPage == 4, start ==31, end == 40
		 *  .
		 *  .  
		 */
		int end = reqPage * viewNoticeCnt; 
		int start = end - viewNoticeCnt + 1;				
		
		
		ArrayList<Notice> list = dao.selectNoticeList(conn, start, end);
		
		//페이지네이션 작업 < 1 2 3 4 5 6 7 >		
		
		//전체 게시글 갯수 조회(totCnt)
		int totCnt = dao.selectTotalCount(conn);
		
		//전체 페이지 갯수(totPage)
		/* 
		 * totCnt == 23개 == 3개 페이지
		 * totCnt == 29개 == 3개 페이지
		 * totCnt == 60개 == 6개 페이지
		 * totCnt == 100개 == 10개 페이지
		 * totCnt == 101개 == 11개 페이지
		 * 
		 * 전체 게시글 갯수를 한 페이지에 보여줄 게시글 갯수로 나누었을 때,
		 * 나머지가 존재한다면 나머지 게시글을 보여줄 페이지가 1개 더 필요.
		 */
		
		int totPage = 0;
		if(totCnt % viewNoticeCnt > 0) { //나머지 구하는 수식으로 페이지네이션 구성
			totPage = totCnt / viewNoticeCnt + 1;
		}else {
			totPage = totCnt / viewNoticeCnt;
		}
		
		//페이지네이션 사이즈 1 2 3 4 5
		int pageNaviSize = 5; //페이지 번호의 사이즈 -> 몇개를 보여줄 것인지
		
		/*
		 * ((3-1) / 5) * 5 + 1 -> 1페이지
		 * ((7-1) / 5) * 5 + 1 -> 6페이지
		 * ((14-1) / 5) * 5 + 1 -> 11페이지
		 */		
		//페이지네이션의 시작 번호 (1,2,3,4,5 그룹이면 1이고, 6,7,8,9,10 그룹이면 6이고 11,12,13,14,15, 그룹이면 11)
		int pageNo = ((reqPage-1) / pageNaviSize) * pageNaviSize + 1;
		
		//페이지 하단에 보여줄 페이지네이션 HTML 코드 작성
		String pageNavi = "<ul class='pagination circle-style'>";
		
		//이전 버튼
		if(pageNo != 1) {
			pageNavi += "<li>";
			pageNavi += "<a class='page-item' href='/notice/getList?reqPage=" + (pageNo - 1) + "'>";
			pageNavi += "<span class='material-icons'>chevron_left</span>";
			pageNavi += "</a></li>";			
		}
		
		for(int i=0; i<pageNaviSize; i++) {
			pageNavi += "<li>";
			
			//페이지 번호 작성 중, 사용자가 요청한 페이지 일 때 클래스를 다르게 지정하여 시각적인 효과
			if(pageNo == reqPage) {
				pageNavi += "<a class='page-item active-page' href='/notice/getList?reqPage=" + pageNo + "'>";
			}else {
				pageNavi += "<a class='page-item' href='/notice/getList?reqPage=" + pageNo + "'>";
			}
			
			pageNavi += pageNo; //시작태그와 종료 태그 사이에 작성되는 값
			pageNavi += "</a></li>";			
			pageNo++;
			
			//설정한 pageNaviSize만큼 항상 그리지 않고, 마지막 페이지 그렸으면 더 이상 생성하지 않도록 처리
			//ex) 총 게시글 갯수가 130개면, 13개 페이지가 그려져야 함. 근데 pageNaviSize만큼 반복문 처리하면 11, 12, 13, 14, 15까지 모두 그려진다.. 13까지만 그리고 반복문 종료
			if(pageNo > totPage) {
				break;
			}
		}
		
		//다음 버튼
		if(pageNo <= totPage) {
			pageNavi += "<li>";
			pageNavi += "<a class='page-item' href='/notice/getList?reqPage=" + pageNo + "'>";
			pageNavi += "<span class='material-icons'>chevron_right</span>";
			pageNavi += "</a></li>";
		}
		
		pageNavi +="</ul>";
		
		/*
		 * 서블릿으로 리턴해야되는 값 => 게시글 리스트(list)와 페이지 하단에 보여줄 페이지네이션(pageNavi)
		 * 자바에서 메소드는 하나의 값만을 리턴할 수 있음. => 2개의 값을 저장할 수 있는 객체 ListData 생성
		 */
		
		ListData<Notice> listdata = new ListData<Notice>();
		listdata.setList(list);
		listdata.setPageNavi(pageNavi);		
				
		JDBCTemplate.close(conn);				
		return listdata;
	}

	public int insertNotice(Notice notice, ArrayList<NoticeFile> fileList) {
		Connection conn = JDBCTemplate.getConnection();
		
		/* 현재 기능은 등록 == insert임.
		 * 대상 테이블은 tbl_notice(게시판), tbl_notice_file(게시판의 파일)
		 * 	- 부모 테이블 : tbl_notice
		 *  - 자식 테이블 : tbl_notice_file
		 *  
		 *  부모 테이블의 데이터가 존재해야, 자식 테이블에 INSERT가 가능함.
		 *  즉, tbl_notice에 insert가 먼저 수행되어야 함.
		 *  
		 *  (1)게시글 번호 조회 select Query
		 *  
		 *  (2)tbl_notice에 insert Query
		 *  insert into tbl_notice values(?, ?, ?, ?, sysdate, default);
		 *  
		 *  (3)tbl_notice_file insert Query
		 *  insert into tbl_notice_file values(seq_notice_file.nextval, ?, 4, '0')
		 * 
		 */		
		
		//(1) 게시글 번호 조회
		String noticeNo = dao.selectNoticeNo(conn);
		
		notice.setNoticeNo(noticeNo);
		
		//(2) tbl_notice에 insert(게시글 정보 선등록)
		int result = dao.insertNotice(conn, notice);
		
		if(result > 0) {
			for(NoticeFile file : fileList) {
				file.setNoticeNo(noticeNo); //(1)에서 조회한 게시글 번호
								
				//(3) tbl_notice_file에 insert(게시글에 대한 파일 등록)
				result = dao.insertNoticeFile(conn, file);
				
				//파일 정보 등록 중, 정상 수행되지 않았을 경우 모두 롤백처리하고, 메소드 종료
				if(result < 1) {
					JDBCTemplate.rollback(conn);
					JDBCTemplate.close(conn);
					return 0;
				}
			}
		}else {
			JDBCTemplate.rollback(conn);
		}
		
		JDBCTemplate.close(conn);
				
		return result;
	}
}
